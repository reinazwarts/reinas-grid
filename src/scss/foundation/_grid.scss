// Default horizontal gutter of cols
// these variables can be overruled by specifying them before this file
$grid-gutter: 40px !default;
$grid-gutter-sm: 10px !default;

.o-content-width {
	padding-left: ($grid-gutter / 2);
  padding-right: ($grid-gutter / 2);

  &.u-no-padding {
      padding: 0;
  }    
}

%clearfix {
    content: '';
	display: table;
	clear: both;
}

.clearfix:after {
    @extend %clearfix;
}

.row {
  margin-left: ($grid-gutter / -2);
  margin-right: ($grid-gutter / -2);
	display: block;//in case this is set to a non-div, i.e. a li or span

	&:after {
		@extend %clearfix;		
	}
	
	&.u-no-margin {//don't use this combined with no-gutter on cols
		margin-right: 0;
		margin-left: 0;
	}

    // small gutter
    &.u-gutter-small {
        margin-left: ($grid-gutter-sm / -2);
        margin-right: ($grid-gutter-sm / -2);

        > [class*=col-] {
            padding-left: ($grid-gutter-sm / 2);
            padding-right: ($grid-gutter-sm / 2);
        }
    }

    // vertical gutter
    &.u-vertical-gutter > [class*=col-] {
        margin-bottom: ($grid-gutter);
    }
    &.u-vertical-gutter.u-gutter-small > [class*=col-] {
        margin-bottom: ($grid-gutter-sm);
    }

}

[class*=col-] {
	float: left;
	padding-left: ($grid-gutter / 2);
    padding-right: ($grid-gutter / 2);

    &.u-no-gutter {
	    padding: 0;
    }
    &.u-no-gutter-left {
	    padding-left: 0;
    }
    &.u-no-gutter-right {
	    padding-right: 0;
    }
    &.u-push-right {
        float: right;
    }
}


// column sizes
$col-sizes: (
	//name, width in %
	(	'10', 10),
  (	'12', 12.5), //100:8
  (	'14', 14.2857), //100:7
  (	'15', 15),
  (	'16', 16.6665), //100:6
  (	'20', 20),
	(	'25', 25),
	(	'30', 30),
	(	'33', 33.3333),
	(	'35', 35),
	(	'40', 40),
	(	'45', 45),
	(	'50', 50),
	(	'55', 55),
	(	'60', 60),
	(	'65', 65),
	(	'67', 66.6666),
	(	'70', 70),
	(	'75', 75),
	(	'80', 80),
  (	'90', 90),
	(	'100', 100)
);

// define default screensizes
// these variables can be overruled by specifying them before this file
$screen-xs-min: 0 !default;
$screen-sm-min: 480px !default;
$screen-md-min: 600px !default;
$screen-lg-min: 800px !default;

$screen-xs-max: $screen-sm-min - 1 !default;
$screen-sm-max: $screen-md-min - 1 !default;
$screen-md-max: $screen-lg-min - 1 !default;
$screen-lg-max: 3000px !default;

$screensizes: (
    // name, min-width, max-width
    (xs, $screen-xs-min, $screen-xs-max),
    (sm, $screen-sm-min, $screen-sm-max),
    (md, $screen-md-min, $screen-md-max),
    (lg, $screen-lg-min, $screen-lg-max),
);

.u-auto-clear {
    .col-12:nth-child(8n+1),
    .col-14:nth-child(7n+1),
    .col-16:nth-child(6n+1),
    .col-20:nth-child(5n+1),
    .col-25:nth-child(4n+1),
    .col-33:nth-child(3n+1),
    .col-50:nth-child(2n+1) {
        clear: both;
    }
}

@each $screen-name, $min-width, $max-width in $screensizes {
	@media all and (min-width: $min-width) {
		@each $col-name, $col-width in $col-sizes {      
			.col-#{$col-name} {
				width: $col-width*1%;
			}
			.col-#{$screen-name}-#{$col-name} {
				width: $col-width*1%;
			}
			.col-#{$screen-name}-offset-#{$col-name} {
				margin-left: $col-width*1%;
			}         
		}
	}
    @media all and (min-width: $min-width) and (max-width: $max-width) {
        .u-auto-clear {
            .col-#{$screen-name}-12:nth-child(8n+1),
            .col-#{$screen-name}-14:nth-child(7n+1),
            .col-#{$screen-name}-16:nth-child(6n+1),
            .col-#{$screen-name}-20:nth-child(5n+1),
            .col-#{$screen-name}-25:nth-child(4n+1),
            .col-#{$screen-name}-33:nth-child(3n+1),
            .col-#{$screen-name}-50:nth-child(2n+1) {
                clear: both;
            }
        }
    }
}



.u-centered {
    text-align: center;
    font-size: 0;
    [class*=col-] {
        font-size: 1.6rem;
        float: none;
	    display: inline-block;
	    vertical-align: top;
        text-align: left;
    }

    &:not(.u-centered-flat) {
        @each $screen-name, $min-width, $max-width in $screensizes {
            @media all and (min-width: $min-width) and (max-width: $max-width) {
                @each $col-name, $col-width in $col-sizes {
                    @if $col-name == '16' {                        
                        .col-#{$screen-name}-#{$col-name}:first-child:nth-last-child(7) ~ [class*=col-]:nth-child(4) {
                            margin-right: 16.6665%;
                        }
                        .col-#{$screen-name}-#{$col-name}:first-child:nth-last-child(7) {
                            margin-right: 0;
                            margin-left: 16.6665%;
                        }
                        .col-#{$screen-name}-#{$col-name}:first-child:nth-last-child(8),
                        .col-#{$screen-name}-#{$col-name}:first-child:nth-last-child(8) ~ [class*=col-],
                        .col-#{$screen-name}-#{$col-name}:first-child:nth-last-child(9),
                        .col-#{$screen-name}-#{$col-name}:first-child:nth-last-child(9) ~ [class*=col-] {
                            width: 16.8%;
                        }
                    }
                    @if $col-name == '20' {                        
                        .col-#{$screen-name}-#{$col-name}:first-child:nth-last-child(6) ~ [class*=col-]:nth-child(3) {
                            margin-right: 20%;
                        }
                        .col-#{$screen-name}-#{$col-name}:first-child:nth-last-child(6) {
                            margin-right: 0;
                            margin-left: 20%;
                        }
                        .col-#{$screen-name}-#{$col-name}:first-child:nth-last-child(7),
                        .col-#{$screen-name}-#{$col-name}:first-child:nth-last-child(7) ~ [class*=col-],
                        .col-#{$screen-name}-#{$col-name}:first-child:nth-last-child(8),
                        .col-#{$screen-name}-#{$col-name}:first-child:nth-last-child(8) ~ [class*=col-] {
                            width: 20.1%;
                        }
                    }
                    @if $col-name == '25' {
                        .col-#{$screen-name}-#{$col-name}:first-child:nth-last-child(5),
                        .col-#{$screen-name}-#{$col-name}:first-child:nth-last-child(5) ~ [class*=col-],
                        .col-#{$screen-name}-#{$col-name}:first-child:nth-last-child(6),
                        .col-#{$screen-name}-#{$col-name}:first-child:nth-last-child(6) ~ [class*=col-] {
                            width: 25.1%;
                        }
                    }
                    @if $col-name == '33' {
                        .col-#{$screen-name}-#{$col-name}:first-child:nth-last-child(4),
                        .col-#{$screen-name}-#{$col-name}:first-child:nth-last-child(4) ~ [class*=col-] {
                            width: 33.4%;
                        }
                    }
                }
            }
        }
    }
}





// justified grid (with equal width columns only!)
// i.e. three columns of 25% become 33.3333% to fill up the row
.u-justified {
	[class*=col-] {
		width: 100%;
	}
	@each $screensize in $screensizes {
		$name:		nth($screensize, 1);
		$min-width: nth($screensize, 2);
		$max-width: nth($screensize, 3);

		@if $name == sm {

			@media all and (min-width: $min-width) and (max-width: $max-width) {
				[class*=col-] {
					width: 50%;
				}
				[class*=col-]:nth-child(2n+1) {
					clear: both;
				}
				[class*=col-]:first-child:nth-last-child(1) {
					width: 100%;
				}

			}

		} @elseif $name == md {

			@media all and (min-width: $min-width) and (max-width: $max-width) {
				[class*=col-] {
					width: 33%;
				}
				[class*=col-]:nth-child(3n+1) {
					clear: both;
				}

				[class*=col-]:first-child:nth-last-child(1) {
					width: 100%;
				}

				[class*=col-]:first-child:nth-last-child(2),
				[class*=col-]:first-child:nth-last-child(2) ~ [class*=col-],
				[class*=col-]:first-child:nth-last-child(4),
				[class*=col-]:first-child:nth-last-child(4) ~ [class*=col-] {
					width: 50%;
					clear: none;
				}
				[class*=col-]:first-child:nth-last-child(4) ~ [class*=col-]:nth-child(2n+1) {
					clear: both;
				}

				[class*=col-]:first-child:nth-last-child(3),
				[class*=col-]:first-child:nth-last-child(3) ~ [class*=col-],
				[class*=col-]:first-child:nth-last-child(5),
				[class*=col-]:first-child:nth-last-child(5) ~ [class*=col-] {
					width: 33.3333%;
				}

			}

		} @elseif $name == lg {

			@media all and (min-width: $min-width) {
				[class*=col-] {
					width: 25%;
				}
				[class*=col-]:nth-child(4n+1) {
					clear: both;
				}

				[class*=col-]:first-child:nth-last-child(1) {
					width: 100%;
				}

				[class*=col-]:first-child:nth-last-child(2),
				[class*=col-]:first-child:nth-last-child(2) ~ [class*=col-] {
					width: 50%;
					clear: none;
				}
				[class*=col-]:first-child:nth-last-child(2) ~ [class*=col-]:nth-child(2n+1) {
					clear: both;
				}

				[class*=col-]:first-child:nth-last-child(3),
				[class*=col-]:first-child:nth-last-child(3) ~ [class*=col-],
				[class*=col-]:first-child:nth-last-child(5),
				[class*=col-]:first-child:nth-last-child(5) ~ [class*=col-],
				[class*=col-]:first-child:nth-last-child(6),
				[class*=col-]:first-child:nth-last-child(6) ~ [class*=col-] {
					width: 33.3333%;
					clear: none;
				}
				[class*=col-]:first-child:nth-last-child(3) ~ [class*=col-]:nth-child(3n+1),
				[class*=col-]:first-child:nth-last-child(5) ~ [class*=col-]:nth-child(3n+1),
				[class*=col-]:first-child:nth-last-child(6) ~ [class*=col-]:nth-child(3n+1) {
					clear: both;
				}
			}

		}
	}
}








/* vertical aligned flexgrid */
.u-valigned {
	font-size: 0;
	[class*=col-] {
		font-size: 1.6rem;
        float: none;
	    display: inline-block;
	    vertical-align: middle;
	}
}